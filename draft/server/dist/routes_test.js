"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var httpMocks = __importStar(require("node-mocks-http"));
var routes_1 = require("./routes");
describe('routes', function () {
    // it('Dummy', function() {
    //   const req1 = httpMocks.createRequest(
    //       {method: 'GET', url: '/api/dummy', query: {name: 'Kevin'}});
    //   const res1 = httpMocks.createResponse();
    //   Dummy(req1, res1);
    //   assert.strictEqual(res1._getStatusCode(), 200);
    //   assert.deepEqual(res1._getJSONData(), 'Hi, Kevin');
    // });
    it('Tests', function () {
        // test NewDraft
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { drafters: "John\nPaul\nGeorge\nRingo",
                picks: "red\norange\nyellow\ngreen\nblue\nindigo\nviolet\npink", rounds: 2 } });
        var res1 = httpMocks.createResponse();
        (0, routes_1.NewDraft)(req1, res1);
        assert.deepStrictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getJSONData(), { draftID: 0 });
        // test PicksMade is empty
        var req2 = httpMocks.createRequest({ method: 'GET', url: '/api/history', query: { draftID: 0 } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.PicksMade)(req2, res2);
        assert.deepStrictEqual(res2._getStatusCode(), 200);
        assert.deepStrictEqual(res2._getJSONData(), { picks: [] });
        // test ListChoices is all choices
        var req3 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: { draftID: 0 } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.ListChoices)(req3, res3);
        assert.deepStrictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getJSONData(), { choices: ["blue", "green", "indigo", "orange", "pink", "red", "violet", "yellow"] });
        // test WhoseTurn in John
        var req4 = httpMocks.createRequest({ method: 'GET', url: '/api/turn', query: { draftID: 0 } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.WhoseTurn)(req4, res4);
        assert.deepStrictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getJSONData(), { currentDrafter: "John" });
        // test DraftComplete is False
        var req5 = httpMocks.createRequest({ method: 'GET', url: '/api/complete', query: { draftID: 0 } });
        var res5 = httpMocks.createResponse();
        (0, routes_1.DraftComplete)(req5, res5);
        assert.deepStrictEqual(res5._getStatusCode(), 200);
        assert.deepStrictEqual(res5._getJSONData(), { complete: false });
        // test RecordPick with John picking orange
        var req6 = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "orange" } });
        var res6 = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req6, res6);
        assert.deepStrictEqual(res6._getStatusCode(), 200);
        assert.deepStrictEqual(res6._getJSONData(), { picksRemaining: 7 });
        // test WhoseTurn is Paul
        var req7 = httpMocks.createRequest({ method: 'GET', url: '/api/turn', query: { draftID: 0 } });
        var res7 = httpMocks.createResponse();
        (0, routes_1.WhoseTurn)(req7, res7);
        assert.deepStrictEqual(res7._getStatusCode(), 200);
        assert.deepStrictEqual(res7._getJSONData(), { currentDrafter: "Paul" });
        // test PicksMade has one entry (orange)
        var req8 = httpMocks.createRequest({ method: 'GET', url: '/api/history', query: { draftID: 0 } });
        var res8 = httpMocks.createResponse();
        (0, routes_1.PicksMade)(req8, res8);
        assert.deepStrictEqual(res8._getStatusCode(), 200);
        assert.deepStrictEqual(res8._getJSONData(), { picks: [{ pick: "orange", drafter: "John" }] });
        // test ListChoices is all colors except orange
        var req9 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: { draftID: 0 } });
        var res9 = httpMocks.createResponse();
        (0, routes_1.ListChoices)(req9, res9);
        assert.deepStrictEqual(res9._getStatusCode(), 200);
        assert.deepStrictEqual(res9._getJSONData(), { choices: ["blue", "green", "indigo", "pink", "red", "violet", "yellow"] });
        // test RecordPick through the first round
        var req10a = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "green" } });
        var res10a = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req10a, res10a);
        assert.deepStrictEqual(res10a._getStatusCode(), 200);
        assert.deepStrictEqual(res10a._getJSONData(), { picksRemaining: 6 });
        var req10b = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "indigo" } });
        var res10b = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req10b, res10b);
        assert.deepStrictEqual(res10b._getStatusCode(), 200);
        assert.deepStrictEqual(res10b._getJSONData(), { picksRemaining: 5 });
        var req10c = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "violet" } });
        var res10c = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req10c, res10c);
        assert.deepStrictEqual(res10c._getStatusCode(), 200);
        assert.deepStrictEqual(res10c._getJSONData(), { picksRemaining: 4 });
        // test WhoseTurn is John
        var req11 = httpMocks.createRequest({ method: 'GET', url: '/api/turn', query: { draftID: 0 } });
        var res11 = httpMocks.createResponse();
        (0, routes_1.WhoseTurn)(req11, res11);
        assert.deepStrictEqual(res11._getStatusCode(), 200);
        assert.deepStrictEqual(res11._getJSONData(), { currentDrafter: "John" });
        // test ListChoices
        var req12 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: { draftID: 0 } });
        var res12 = httpMocks.createResponse();
        (0, routes_1.ListChoices)(req12, res12);
        assert.deepStrictEqual(res12._getStatusCode(), 200);
        assert.deepStrictEqual(res12._getJSONData(), { choices: ["blue", "pink", "red", "yellow"] });
        // test PicksMade
        var req13 = httpMocks.createRequest({ method: 'GET', url: '/api/history', query: { draftID: 0 } });
        var res13 = httpMocks.createResponse();
        (0, routes_1.PicksMade)(req13, res13);
        assert.deepStrictEqual(res13._getStatusCode(), 200);
        assert.deepStrictEqual(res13._getJSONData(), { picks: [{ pick: "orange", drafter: "John" }, { pick: "green", drafter: "Paul" },
                { pick: "indigo", drafter: "George" }, { pick: "violet", drafter: "Ringo" }] });
        // test RecordPick through the end
        var req14a = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "blue" } });
        var res14a = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req14a, res14a);
        assert.deepStrictEqual(res14a._getStatusCode(), 200);
        assert.deepStrictEqual(res14a._getJSONData(), { picksRemaining: 3 });
        var req14b = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "yellow" } });
        var res14b = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req14b, res14b);
        assert.deepStrictEqual(res14b._getStatusCode(), 200);
        assert.deepStrictEqual(res14b._getJSONData(), { picksRemaining: 2 });
        var req14c = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "pink" } });
        var res14c = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req14c, res14c);
        assert.deepStrictEqual(res14c._getStatusCode(), 200);
        assert.deepStrictEqual(res14c._getJSONData(), { picksRemaining: 1 });
        var req14d = httpMocks.createRequest({ method: 'GET', url: '/api/pick', query: { draftID: 0, pick: "red" } });
        var res14d = httpMocks.createResponse();
        (0, routes_1.RecordPick)(req14d, res14d);
        assert.deepStrictEqual(res14d._getStatusCode(), 200);
        assert.deepStrictEqual(res14d._getJSONData(), { picksRemaining: 0 });
        // test DraftComplete
        var req15 = httpMocks.createRequest({ method: 'GET', url: '/api/complete', query: { draftID: 0 } });
        var res15 = httpMocks.createResponse();
        (0, routes_1.DraftComplete)(req15, res15);
        assert.deepStrictEqual(res15._getStatusCode(), 200);
        assert.deepStrictEqual(res15._getJSONData(), { complete: true });
        // test NewDraft again
        var req16 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { drafters: "Gerard\nRay\nMikey\nFrank",
                picks: "apple\norange\nbanana\npear", rounds: 1 } });
        var res16 = httpMocks.createResponse();
        (0, routes_1.NewDraft)(req16, res16);
        assert.deepStrictEqual(res16._getStatusCode(), 200);
        assert.deepStrictEqual(res16._getJSONData(), { draftID: 1 });
        // test that first draft PicksMade still works
        var req17 = httpMocks.createRequest({ method: 'GET', url: '/api/history', query: { draftID: 0 } });
        var res17 = httpMocks.createResponse();
        (0, routes_1.PicksMade)(req17, res17);
        assert.deepStrictEqual(res17._getStatusCode(), 200);
        assert.deepStrictEqual(res17._getJSONData(), { picks: [{ pick: "orange", drafter: "John" }, { pick: "green", drafter: "Paul" },
                { pick: "indigo", drafter: "George" }, { pick: "violet", drafter: "Ringo" }, { pick: "blue", drafter: "John" }, { pick: "yellow", drafter: "Paul" },
                { pick: "pink", drafter: "George" }, { pick: "red", drafter: "Ringo" }] });
        // test new drafts' List Choices
        var req18 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: { draftID: 1 } });
        var res18 = httpMocks.createResponse();
        (0, routes_1.ListChoices)(req18, res18);
        assert.deepStrictEqual(res18._getStatusCode(), 200);
        assert.deepStrictEqual(res18._getJSONData(), { choices: ["apple", "banana", "orange", "pear"] });
        // test ValidID - true
        var req19 = httpMocks.createRequest({ method: 'GET', url: '/api/validID', query: { draftID: 1 } });
        var res19 = httpMocks.createResponse();
        (0, routes_1.ValidID)(req19, res19);
        assert.deepStrictEqual(res19._getStatusCode(), 200);
        assert.deepStrictEqual(res19._getJSONData(), { valid: true });
        // test ValidID - false
        var req20 = httpMocks.createRequest({ method: 'GET', url: '/api/validID', query: { draftID: 3 } });
        var res20 = httpMocks.createResponse();
        (0, routes_1.ValidID)(req20, res20);
        assert.deepStrictEqual(res20._getStatusCode(), 200);
        assert.deepStrictEqual(res20._getJSONData(), { valid: false });
        // test ValidDrafter - true
        var req21 = httpMocks.createRequest({ method: 'GET', url: '/api/validDrafter', query: { draftID: 0, drafter: "George" } });
        var res21 = httpMocks.createResponse();
        (0, routes_1.ValidDrafter)(req21, res21);
        assert.deepStrictEqual(res21._getStatusCode(), 200);
        assert.deepStrictEqual(res21._getJSONData(), { valid: true });
        // test ValidDrafter - false
        var req22 = httpMocks.createRequest({ method: 'GET', url: '/api/ValidDrafter', query: { draftID: 1, drafter: "John" } });
        var res22 = httpMocks.createResponse();
        (0, routes_1.ValidDrafter)(req22, res22);
        assert.deepStrictEqual(res22._getStatusCode(), 200);
        assert.deepStrictEqual(res22._getJSONData(), { valid: false });
        // if you have time - add tests for errors
    });
});
//# sourceMappingURL=data:application/json;base64,